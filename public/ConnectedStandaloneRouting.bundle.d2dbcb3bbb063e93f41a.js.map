{"version":3,"sources":["webpack:///./routes/StandaloneRouting.js","webpack:///./connectedComponents/ConnectedStandaloneRouting.js","webpack:///./customHooks/usePrevious.js","webpack:///C:/projects/Viewers/node_modules/lodash/_baseValues.js","webpack:///./connectedComponents/ViewerRetrieveStudyData.js","webpack:///./connectedComponents/ConnectedViewerRetrieveStudyData.js","webpack:///C:/projects/Viewers/node_modules/lodash/values.js","webpack:///C:/projects/Viewers/node_modules/querystring-es3/index.js","webpack:///C:/projects/Viewers/node_modules/querystring-es3/decode.js","webpack:///C:/projects/Viewers/node_modules/querystring-es3/encode.js"],"names":["log","OHIF","metadata","studyMetadataManager","utils","OHIFStudyMetadata","StandaloneRouting","studies","server","studyInstanceUIDs","seriesInstanceUIDs","error","loading","query","Promise","resolve","reject","url","Error","oReq","XMLHttpRequest","addEventListener","warn","event","target","status","responseText","info","JSON","stringify","data","parse","servers","dicomWeb","type","props","activateServer","split","StudyInstanceUID","SeriesInstanceUID","metadataProvider","cornerstone","forEach","study","series","instances","instance","imageId","naturalizedDicom","addInstance","addImageIdToUIDs","SOPInstanceUID","open","setRequestHeader","send","search","this","location","slice","length","qs","parseQueryAndRetrieveDICOMWebData","_mapStudiesToNewFormat","updatedStudies","updatedStudiesInstanceUIDs","setState","message","state","NotFound","showGoBackButton","ConnectedViewer","ConnectedViewerRetrieveStudyData","Component","PropTypes","object","store","setServers","func","purge","uniqueStudyUIDs","Set","map","studyMetadata","sopClassHandlerModules","extensionManager","modules","displaySets","createDisplaySets","setDisplaySets","add","Array","from","ConnectedStandaloneRouting","connect","dispatch","usePrevious","value","ref","useRef","useEffect","current","arrayMap","module","exports","key","OHIFSeriesMetadata","retrieveStudiesMetadata","deleteStudyMetadataPromise","makeCancelable","_promoteStudyDisplaySet","filters","promoted","Object","keys","seriesInstanceUID","promotedResponse","list","searchMethod","response","index","findIndex","bind","undefined","first","splice","_promoteToFront","getDisplaySets","valueToCompare","displaySet","_addSeriesToStudy","getData","seriesMetadata","addSeries","createAndAddDisplaySetsForSeries","_updateStudyMetadataManager","get","_sortStudyDisplaySet","sortDisplaySets","ViewerRetrieveStudyData","cancelableSeriesPromises","cancelableStudiesPromises","clearViewportSpecificData","useState","setError","setStudies","isStudyLoaded","setIsStudyLoaded","snackbarContext","useSnackbarContext","useContext","AppContext","appConfig","filterQueryParam","isFilterStrategy","studyDidLoad","_promoteList","queryParamApplied","dialog","show","showUserMessage","_showUserMessage","applied","firstSeries","_isQueryParamApplied","processStudies","studiesData","isArray","_updateStudyDisplaySets","seriesLoader","promisesLoaders","hasNext","push","next","then","all","_loadRemainingSeries","result","isCanceled","catch","loadStudies","retrieveParams","purgeCancellablePromises","cancel","remove","prevStudyInstanceUIDs","every","e","includes","propTypes","array","isRequired","redux","actions","isActive","a","active","ownProps","activeServer","find","baseValues","decode","encode","hasOwnProperty","obj","prop","prototype","call","sep","eq","options","regexp","maxKeys","len","i","kstr","vstr","k","v","x","replace","idx","indexOf","substr","decodeURIComponent","xs","toString","stringifyPrimitive","isFinite","name","objectKeys","ks","encodeURIComponent","join","f","res"],"mappings":"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","file":"ConnectedStandaloneRouting.bundle.d2dbcb3bbb063e93f41a.js","sourcesContent":["import React, { Component } from 'react';\r\nimport OHIF from '@ohif/core';\r\nimport PropTypes from 'prop-types';\r\nimport qs from 'querystring';\r\n\r\nimport { extensionManager } from './../App.js';\r\nimport ConnectedViewer from '../connectedComponents/ConnectedViewer';\r\nimport ConnectedViewerRetrieveStudyData from '../connectedComponents/ConnectedViewerRetrieveStudyData';\r\nimport NotFound from '../routes/NotFound';\r\n\r\nconst { log, metadata, utils } = OHIF;\r\nconst { studyMetadataManager } = utils;\r\nconst { OHIFStudyMetadata } = metadata;\r\n\r\nclass StandaloneRouting extends Component {\r\n  state = {\r\n    studies: null,\r\n    server: null,\r\n    studyInstanceUIDs: null,\r\n    seriesInstanceUIDs: null,\r\n    error: null,\r\n    loading: true,\r\n  };\r\n\r\n  static propTypes = {\r\n    location: PropTypes.object,\r\n    store: PropTypes.object,\r\n    setServers: PropTypes.func,\r\n  };\r\n\r\n  parseQueryAndRetrieveDICOMWebData(query) {\r\n    return new Promise((resolve, reject) => {\r\n      const url = query.url;\r\n\r\n      if (!url) {\r\n        return reject(new Error('No URL was specified. Use ?url=$yourURL'));\r\n      }\r\n\r\n      // Define a request to the server to retrieve the study data\r\n      // as JSON, given a URL that was in the Route\r\n      const oReq = new XMLHttpRequest();\r\n\r\n      // Add event listeners for request failure\r\n      oReq.addEventListener('error', error => {\r\n        log.warn('An error occurred while retrieving the JSON data');\r\n        reject(error);\r\n      });\r\n\r\n      // When the JSON has been returned, parse it into a JavaScript Object\r\n      // and render the OHIF Viewer with this data\r\n      oReq.addEventListener('load', event => {\r\n        if (event.target.status === 404) {\r\n          reject(new Error('No JSON data found'));\r\n        }\r\n\r\n        // Parse the response content\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseText\r\n        if (!oReq.responseText) {\r\n          log.warn('Response was undefined');\r\n          reject(new Error('Response was undefined'));\r\n        }\r\n\r\n        log.info(JSON.stringify(oReq.responseText, null, 2));\r\n\r\n        const data = JSON.parse(oReq.responseText);\r\n        if (data.servers) {\r\n          if (!query.studyInstanceUIDs) {\r\n            log.warn('No study instance uids specified');\r\n            reject(new Error('No study instance uids specified'));\r\n          }\r\n\r\n          const server = data.servers.dicomWeb[0];\r\n          server.type = 'dicomWeb';\r\n\r\n          log.warn('Activating server', server);\r\n          this.props.activateServer(server);\r\n\r\n          const studyInstanceUIDs = query.studyInstanceUIDs.split(';');\r\n          const seriesInstanceUIDs = query.seriesInstanceUIDs\r\n            ? query.seriesInstanceUIDs.split(';')\r\n            : [];\r\n\r\n          resolve({ server, studyInstanceUIDs, seriesInstanceUIDs });\r\n        } else {\r\n          // Parse data here and add to metadata provider.\r\n          const metadataProvider = OHIF.cornerstone.metadataProvider;\r\n\r\n          let StudyInstanceUID;\r\n          let SeriesInstanceUID;\r\n\r\n          data.studies.forEach(study => {\r\n            StudyInstanceUID = study.StudyInstanceUID;\r\n\r\n            study.series.forEach(series => {\r\n              SeriesInstanceUID = series.SeriesInstanceUID;\r\n\r\n              series.instances.forEach(instance => {\r\n                const { url: imageId, metadata: naturalizedDicom } = instance;\r\n\r\n                // Add instance to metadata provider.\r\n                metadataProvider.addInstance(naturalizedDicom);\r\n                // Add imageId specific mapping to this data as the URL isn't necessarliy WADO-URI.\r\n                metadataProvider.addImageIdToUIDs(imageId, {\r\n                  StudyInstanceUID,\r\n                  SeriesInstanceUID,\r\n                  SOPInstanceUID: naturalizedDicom.SOPInstanceUID,\r\n                });\r\n              });\r\n            });\r\n          });\r\n\r\n          resolve({ studies: data.studies, studyInstanceUIDs: [] });\r\n        }\r\n      });\r\n\r\n      // Open the Request to the server for the JSON data\r\n      // In this case we have a server-side route called /api/\r\n      // which responds to GET requests with the study data\r\n      log.info(`Sending Request to: ${url}`);\r\n      oReq.open('GET', url);\r\n      oReq.setRequestHeader('Accept', 'application/json');\r\n\r\n      // Fire the request to the server\r\n      oReq.send();\r\n    });\r\n  }\r\n\r\n  async componentDidMount() {\r\n    try {\r\n      let { search } = this.props.location;\r\n\r\n      // Remove ? prefix which is included for some reason\r\n      search = search.slice(1, search.length);\r\n      const query = qs.parse(search);\r\n\r\n      let {\r\n        server,\r\n        studies,\r\n        studyInstanceUIDs,\r\n        seriesInstanceUIDs,\r\n      } = await this.parseQueryAndRetrieveDICOMWebData(query);\r\n\r\n      if (studies) {\r\n        const {\r\n          studies: updatedStudies,\r\n          studyInstanceUIDs: updatedStudiesInstanceUIDs,\r\n        } = _mapStudiesToNewFormat(studies);\r\n        studies = updatedStudies;\r\n        studyInstanceUIDs = updatedStudiesInstanceUIDs;\r\n      }\r\n\r\n      this.setState({\r\n        studies,\r\n        server,\r\n        studyInstanceUIDs,\r\n        seriesInstanceUIDs,\r\n        loading: false,\r\n      });\r\n    } catch (error) {\r\n      this.setState({ error: error.message, loading: false });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const message = this.state.error\r\n      ? `Error: ${JSON.stringify(this.state.error)}`\r\n      : 'Loading...';\r\n    if (this.state.error || this.state.loading) {\r\n      return <NotFound message={message} showGoBackButton={this.state.error} />;\r\n    }\r\n\r\n    return this.state.studies ? (\r\n      <ConnectedViewer studies={this.state.studies} />\r\n    ) : (\r\n      <ConnectedViewerRetrieveStudyData\r\n        studyInstanceUIDs={this.state.studyInstanceUIDs}\r\n        seriesInstanceUIDs={this.state.seriesInstanceUIDs}\r\n        server={this.state.server}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nconst _mapStudiesToNewFormat = studies => {\r\n  studyMetadataManager.purge();\r\n\r\n  /* Map studies to new format, update metadata manager? */\r\n  const uniqueStudyUIDs = new Set();\r\n  const updatedStudies = studies.map(study => {\r\n    const studyMetadata = new OHIFStudyMetadata(study, study.StudyInstanceUID);\r\n\r\n    const sopClassHandlerModules =\r\n      extensionManager.modules['sopClassHandlerModule'];\r\n    study.displaySets =\r\n      study.displaySets ||\r\n      studyMetadata.createDisplaySets(sopClassHandlerModules);\r\n    studyMetadata.setDisplaySets(study.displaySets);\r\n\r\n    studyMetadataManager.add(studyMetadata);\r\n    uniqueStudyUIDs.add(study.StudyInstanceUID);\r\n\r\n    return study;\r\n  });\r\n\r\n  return {\r\n    studies: updatedStudies,\r\n    studyInstanceUIDs: Array.from(uniqueStudyUIDs),\r\n  };\r\n};\r\n\r\nexport default StandaloneRouting;\r\n","import { connect } from 'react-redux';\r\nimport StandaloneRouting from '../routes/StandaloneRouting';\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    activateServer: server => {\r\n      const action = {\r\n        type: 'ACTIVATE_SERVER',\r\n        server,\r\n      };\r\n      dispatch(action);\r\n    },\r\n  };\r\n};\r\n\r\nconst ConnectedStandaloneRouting = connect(\r\n  null,\r\n  mapDispatchToProps\r\n)(StandaloneRouting);\r\n\r\nexport default ConnectedStandaloneRouting;\r\n","import React, { useEffect, useRef } from 'react';\r\nexport default function usePrevious(value) {\r\n  const ref = useRef();\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  }, [value]);\r\n\r\n  return ref.current;\r\n}\r\n","var arrayMap = require('./_arrayMap');\n\n/**\n * The base implementation of `_.values` and `_.valuesIn` which creates an\n * array of `object` property values corresponding to the property names\n * of `props`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array} props The property names to get values for.\n * @returns {Object} Returns the array of property values.\n */\nfunction baseValues(object, props) {\n  return arrayMap(props, function(key) {\n    return object[key];\n  });\n}\n\nmodule.exports = baseValues;\n","import React, { useState, useEffect, useContext } from 'react';\r\nimport { metadata, studies, utils, log } from '@ohif/core';\r\nimport usePrevious from '../customHooks/usePrevious';\r\n\r\nimport ConnectedViewer from './ConnectedViewer.js';\r\nimport PropTypes from 'prop-types';\r\nimport { extensionManager } from './../App.js';\r\nimport { useSnackbarContext } from '@ohif/ui';\r\n\r\nconst { OHIFStudyMetadata, OHIFSeriesMetadata } = metadata;\r\nconst { retrieveStudiesMetadata, deleteStudyMetadataPromise } = studies;\r\nconst { studyMetadataManager, makeCancelable } = utils;\r\n\r\n// Contexts\r\nimport AppContext from '../context/AppContext';\r\n\r\nconst _promoteToFront = (list, value, searchMethod) => {\r\n  let response = [...list];\r\n  let promoted = false;\r\n  const index = response.findIndex(searchMethod.bind(undefined, value));\r\n\r\n  if (index > 0) {\r\n    const first = response.splice(index, 1);\r\n    response = [...first, ...response];\r\n  }\r\n\r\n  if (index >= 0) {\r\n    promoted = true;\r\n  }\r\n\r\n  return {\r\n    promoted,\r\n    data: response,\r\n  };\r\n};\r\n\r\n/**\r\n * Promote series to front if find found equivalent on filters object\r\n * @param {Object} study - study reference to promote series against\r\n * @param {Object} [filters] - Object containing filters to be applied\r\n * @param {string} [filter.seriesInstanceUID] - series instance uid to filter results against\r\n * @param {boolean} isFilterStrategy - if filtering by query param strategy ON\r\n */\r\nconst _promoteList = (study, studyMetadata, filters, isFilterStrategy) => {\r\n  let promoted = false;\r\n  // Promote only if no filter should be applied\r\n  if (!isFilterStrategy) {\r\n    _sortStudyDisplaySet(study, studyMetadata);\r\n    promoted = _promoteStudyDisplaySet(study, studyMetadata, filters);\r\n  }\r\n\r\n  return promoted;\r\n};\r\n\r\nconst _promoteStudyDisplaySet = (study, studyMetadata, filters) => {\r\n  let promoted = false;\r\n  const queryParamsLength = Object.keys(filters).length;\r\n  const shouldPromoteToFront = queryParamsLength > 0;\r\n\r\n  if (shouldPromoteToFront) {\r\n    const { seriesInstanceUID } = filters;\r\n\r\n    const _seriesLookup = (valueToCompare, displaySet) => {\r\n      return displaySet.SeriesInstanceUID === valueToCompare;\r\n    };\r\n    const promotedResponse = _promoteToFront(\r\n      studyMetadata.getDisplaySets(),\r\n      seriesInstanceUID,\r\n      _seriesLookup\r\n    );\r\n\r\n    study.displaySets = promotedResponse.data;\r\n    promoted = promotedResponse.promoted;\r\n  }\r\n\r\n  return promoted;\r\n};\r\n\r\n/**\r\n * Method to identify if query param (from url) was applied to given list\r\n * @param {Object} study - study reference to promote series against\r\n * @param {Object} [filters] - Object containing filters to be applied\r\n * @param {string} [filter.seriesInstanceUID] - series instance uid to filter results against\r\n * @param {boolean} isFilterStrategy - if filtering by query param strategy ON\r\n */\r\nconst _isQueryParamApplied = (study, filters = {}, isFilterStrategy) => {\r\n  const { seriesInstanceUID } = filters;\r\n  let applied = true;\r\n  // skip in case no filter or no toast manager\r\n  if (!seriesInstanceUID) {\r\n    return applied;\r\n  }\r\n\r\n  const { series = [], displaySets = [] } = study;\r\n  const firstSeries = isFilterStrategy ? series[0] : displaySets[0];\r\n\r\n  if (!firstSeries || firstSeries.SeriesInstanceUID !== seriesInstanceUID) {\r\n    applied = false;\r\n  }\r\n\r\n  return applied;\r\n};\r\nconst _showUserMessage = (queryParamApplied, message, dialog = {}) => {\r\n  if (queryParamApplied) {\r\n    return;\r\n  }\r\n\r\n  const { show: showUserMessage = () => {} } = dialog;\r\n  showUserMessage({\r\n    message,\r\n  });\r\n};\r\n\r\nconst _addSeriesToStudy = (studyMetadata, series) => {\r\n  const sopClassHandlerModules =\r\n    extensionManager.modules['sopClassHandlerModule'];\r\n  const study = studyMetadata.getData();\r\n  const seriesMetadata = new OHIFSeriesMetadata(series, study);\r\n  studyMetadata.addSeries(seriesMetadata);\r\n  studyMetadata.createAndAddDisplaySetsForSeries(\r\n    sopClassHandlerModules,\r\n    seriesMetadata,\r\n    false\r\n  );\r\n  study.displaySets = studyMetadata.getDisplaySets();\r\n  _updateStudyMetadataManager(study, studyMetadata);\r\n};\r\n\r\nconst _updateStudyMetadataManager = (study, studyMetadata) => {\r\n  const { StudyInstanceUID } = study;\r\n\r\n  if (!studyMetadataManager.get(StudyInstanceUID)) {\r\n    studyMetadataManager.add(studyMetadata);\r\n  }\r\n};\r\n\r\nconst _updateStudyDisplaySets = (study, studyMetadata) => {\r\n  const sopClassHandlerModules =\r\n    extensionManager.modules['sopClassHandlerModule'];\r\n\r\n  if (!study.displaySets) {\r\n    study.displaySets = studyMetadata.createDisplaySets(sopClassHandlerModules);\r\n  }\r\n\r\n  studyMetadata.setDisplaySets(study.displaySets);\r\n};\r\n\r\nconst _sortStudyDisplaySet = (study, studyMetadata) => {\r\n  studyMetadata.sortDisplaySets(study.displaySets);\r\n};\r\nconst _loadRemainingSeries = studyMetadata => {\r\n  const { seriesLoader } = studyMetadata.getData();\r\n  if (!seriesLoader) {\r\n    return Promise.resolve();\r\n  }\r\n  const promisesLoaders = [];\r\n  while (seriesLoader.hasNext()) {\r\n    promisesLoaders.push(\r\n      seriesLoader\r\n        .next()\r\n        .then(\r\n          series => void _addSeriesToStudy(studyMetadata, series),\r\n          error => void log.error(error)\r\n        )\r\n    );\r\n  }\r\n\r\n  return Promise.all(promisesLoaders);\r\n};\r\n\r\nfunction ViewerRetrieveStudyData({\r\n  server,\r\n  studyInstanceUIDs,\r\n  seriesInstanceUIDs,\r\n  clearViewportSpecificData,\r\n}) {\r\n  // hooks\r\n  const [error, setError] = useState(false);\r\n  const [studies, setStudies] = useState([]);\r\n  const [isStudyLoaded, setIsStudyLoaded] = useState(false);\r\n  const snackbarContext = useSnackbarContext();\r\n  const { appConfig = {} } = useContext(AppContext);\r\n  const { filterQueryParam: isFilterStrategy = false } = appConfig;\r\n\r\n  let cancelableSeriesPromises;\r\n  let cancelableStudiesPromises;\r\n  /**\r\n   * Callback method when study is totally loaded\r\n   * @param {object} study study loaded\r\n   * @param {object} studyMetadata studyMetadata for given study\r\n   * @param {Object} [filters] - Object containing filters to be applied\r\n   * @param {string} [filter.seriesInstanceUID] - series instance uid to filter results against\r\n   */\r\n  const studyDidLoad = (study, studyMetadata, filters) => {\r\n    // User message\r\n    const promoted = _promoteList(\r\n      study,\r\n      studyMetadata,\r\n      filters,\r\n      isFilterStrategy\r\n    );\r\n\r\n    // Clear viewport to allow new promoted one to be displayed\r\n    if (promoted) {\r\n      clearViewportSpecificData(0);\r\n    }\r\n\r\n    const isQueryParamApplied = _isQueryParamApplied(\r\n      study,\r\n      filters,\r\n      isFilterStrategy\r\n    );\r\n    // Show message in case not promoted neither filtered but should to\r\n    _showUserMessage(\r\n      isQueryParamApplied,\r\n      'Query parameters were not applied. Using original series list for given study.',\r\n      snackbarContext\r\n    );\r\n\r\n    setStudies([...studies, study]);\r\n    setIsStudyLoaded(true);\r\n  };\r\n\r\n  /**\r\n   * Method to process studies. It will update displaySet, studyMetadata, load remaining series, ...\r\n   * @param {Array} studiesData Array of studies retrieved from server\r\n   * @param {Object} [filters] - Object containing filters to be applied\r\n   * @param {string} [filter.seriesInstanceUID] - series instance uid to filter results against\r\n   */\r\n  const processStudies = (studiesData, filters) => {\r\n    if (Array.isArray(studiesData) && studiesData.length > 0) {\r\n      // Map studies to new format, update metadata manager?\r\n      const studies = studiesData.map(study => {\r\n        const studyMetadata = new OHIFStudyMetadata(\r\n          study,\r\n          study.StudyInstanceUID\r\n        );\r\n\r\n        _updateStudyDisplaySets(study, studyMetadata);\r\n        _updateStudyMetadataManager(study, studyMetadata);\r\n\r\n        // Attempt to load remaning series if any\r\n        cancelableSeriesPromises[study.StudyInstanceUID] = makeCancelable(\r\n          _loadRemainingSeries(studyMetadata)\r\n        )\r\n          .then(result => {\r\n            if (result && !result.isCanceled) {\r\n              studyDidLoad(study, studyMetadata, filters);\r\n            }\r\n          })\r\n          .catch(error => {\r\n            if (error && !error.isCanceled) {\r\n              setError(true);\r\n              log.error(error);\r\n            }\r\n          });\r\n\r\n        return study;\r\n      });\r\n\r\n      setStudies(studies);\r\n    }\r\n  };\r\n\r\n  const loadStudies = async () => {\r\n    try {\r\n      const filters = {};\r\n      // Use the first, discard others\r\n      const seriesInstanceUID = seriesInstanceUIDs && seriesInstanceUIDs[0];\r\n\r\n      const retrieveParams = [server, studyInstanceUIDs];\r\n\r\n      if (seriesInstanceUID) {\r\n        filters.seriesInstanceUID = seriesInstanceUID;\r\n        // Query param filtering controlled by appConfig property\r\n        if (isFilterStrategy) {\r\n          retrieveParams.push(filters);\r\n        }\r\n      }\r\n\r\n      cancelableStudiesPromises[studyInstanceUIDs] = makeCancelable(\r\n        retrieveStudiesMetadata(...retrieveParams)\r\n      )\r\n        .then(result => {\r\n          if (result && !result.isCanceled) {\r\n            processStudies(result, filters);\r\n          }\r\n        })\r\n        .catch(error => {\r\n          if (error && !error.isCanceled) {\r\n            setError(true);\r\n            log.error(error);\r\n          }\r\n        });\r\n    } catch (error) {\r\n      if (error) {\r\n        setError(true);\r\n        log.error(error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const purgeCancellablePromises = () => {\r\n    for (let studyInstanceUIDs in cancelableStudiesPromises) {\r\n      if ('cancel' in cancelableStudiesPromises[studyInstanceUIDs]) {\r\n        cancelableStudiesPromises[studyInstanceUIDs].cancel();\r\n      }\r\n    }\r\n\r\n    for (let studyInstanceUIDs in cancelableSeriesPromises) {\r\n      if ('cancel' in cancelableSeriesPromises[studyInstanceUIDs]) {\r\n        cancelableSeriesPromises[studyInstanceUIDs].cancel();\r\n        deleteStudyMetadataPromise(studyInstanceUIDs);\r\n        studyMetadataManager.remove(studyInstanceUIDs);\r\n      }\r\n    }\r\n  };\r\n\r\n  const prevStudyInstanceUIDs = usePrevious(studyInstanceUIDs);\r\n\r\n  useEffect(() => {\r\n    const hasStudyInstanceUIDsChanged = !(\r\n      prevStudyInstanceUIDs &&\r\n      prevStudyInstanceUIDs.every(e => studyInstanceUIDs.includes(e))\r\n    );\r\n\r\n    if (hasStudyInstanceUIDsChanged) {\r\n      studyMetadataManager.purge();\r\n      purgeCancellablePromises();\r\n    }\r\n  }, [studyInstanceUIDs]);\r\n\r\n  useEffect(() => {\r\n    cancelableSeriesPromises = {};\r\n    cancelableStudiesPromises = {};\r\n    loadStudies();\r\n\r\n    return () => {\r\n      purgeCancellablePromises();\r\n    };\r\n  }, []);\r\n\r\n  if (error) {\r\n    return <div>Error: {JSON.stringify(error)}</div>;\r\n  }\r\n\r\n  return (\r\n    <ConnectedViewer\r\n      studies={studies}\r\n      isStudyLoaded={isStudyLoaded}\r\n      studyInstanceUIDs={studyInstanceUIDs}\r\n    />\r\n  );\r\n}\r\n\r\nViewerRetrieveStudyData.propTypes = {\r\n  studyInstanceUIDs: PropTypes.array.isRequired,\r\n  seriesInstanceUIDs: PropTypes.array,\r\n  server: PropTypes.object,\r\n  clearViewportSpecificData: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ViewerRetrieveStudyData;\r\n","import { connect } from 'react-redux';\r\nimport ViewerRetrieveStudyData from './ViewerRetrieveStudyData.js';\r\nimport OHIF from '@ohif/core';\r\n\r\nconst { clearViewportSpecificData } = OHIF.redux.actions;\r\nconst isActive = a => a.active === true;\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  const activeServer = state.servers.servers.find(isActive);\r\n\r\n  return {\r\n    server: ownProps.server || activeServer,\r\n  };\r\n};\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    clearViewportSpecificData: () => {\r\n      dispatch(clearViewportSpecificData());\r\n    },\r\n  };\r\n};\r\n\r\nconst ConnectedViewerRetrieveStudyData = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ViewerRetrieveStudyData);\r\n\r\nexport default ConnectedViewerRetrieveStudyData;\r\n","var baseValues = require('./_baseValues'),\n    keys = require('./keys');\n\n/**\n * Creates an array of the own enumerable string keyed property values of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property values.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.values(new Foo);\n * // => [1, 2] (iteration order is not guaranteed)\n *\n * _.values('hi');\n * // => ['h', 'i']\n */\nfunction values(object) {\n  return object == null ? [] : baseValues(object, keys(object));\n}\n\nmodule.exports = values;\n","'use strict';\n\nexports.decode = exports.parse = require('./decode');\nexports.encode = exports.stringify = require('./encode');\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n// If obj.hasOwnProperty has been overridden, then calling\n// obj.hasOwnProperty(prop) will break.\n// See: https://github.com/joyent/node/issues/1707\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nmodule.exports = function(qs, sep, eq, options) {\n  sep = sep || '&';\n  eq = eq || '=';\n  var obj = {};\n\n  if (typeof qs !== 'string' || qs.length === 0) {\n    return obj;\n  }\n\n  var regexp = /\\+/g;\n  qs = qs.split(sep);\n\n  var maxKeys = 1000;\n  if (options && typeof options.maxKeys === 'number') {\n    maxKeys = options.maxKeys;\n  }\n\n  var len = qs.length;\n  // maxKeys <= 0 means that we should not limit keys count\n  if (maxKeys > 0 && len > maxKeys) {\n    len = maxKeys;\n  }\n\n  for (var i = 0; i < len; ++i) {\n    var x = qs[i].replace(regexp, '%20'),\n        idx = x.indexOf(eq),\n        kstr, vstr, k, v;\n\n    if (idx >= 0) {\n      kstr = x.substr(0, idx);\n      vstr = x.substr(idx + 1);\n    } else {\n      kstr = x;\n      vstr = '';\n    }\n\n    k = decodeURIComponent(kstr);\n    v = decodeURIComponent(vstr);\n\n    if (!hasOwnProperty(obj, k)) {\n      obj[k] = v;\n    } else if (isArray(obj[k])) {\n      obj[k].push(v);\n    } else {\n      obj[k] = [obj[k], v];\n    }\n  }\n\n  return obj;\n};\n\nvar isArray = Array.isArray || function (xs) {\n  return Object.prototype.toString.call(xs) === '[object Array]';\n};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar stringifyPrimitive = function(v) {\n  switch (typeof v) {\n    case 'string':\n      return v;\n\n    case 'boolean':\n      return v ? 'true' : 'false';\n\n    case 'number':\n      return isFinite(v) ? v : '';\n\n    default:\n      return '';\n  }\n};\n\nmodule.exports = function(obj, sep, eq, name) {\n  sep = sep || '&';\n  eq = eq || '=';\n  if (obj === null) {\n    obj = undefined;\n  }\n\n  if (typeof obj === 'object') {\n    return map(objectKeys(obj), function(k) {\n      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;\n      if (isArray(obj[k])) {\n        return map(obj[k], function(v) {\n          return ks + encodeURIComponent(stringifyPrimitive(v));\n        }).join(sep);\n      } else {\n        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));\n      }\n    }).join(sep);\n\n  }\n\n  if (!name) return '';\n  return encodeURIComponent(stringifyPrimitive(name)) + eq +\n         encodeURIComponent(stringifyPrimitive(obj));\n};\n\nvar isArray = Array.isArray || function (xs) {\n  return Object.prototype.toString.call(xs) === '[object Array]';\n};\n\nfunction map (xs, f) {\n  if (xs.map) return xs.map(f);\n  var res = [];\n  for (var i = 0; i < xs.length; i++) {\n    res.push(f(xs[i], i));\n  }\n  return res;\n}\n\nvar objectKeys = Object.keys || function (obj) {\n  var res = [];\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);\n  }\n  return res;\n};\n"],"sourceRoot":""}