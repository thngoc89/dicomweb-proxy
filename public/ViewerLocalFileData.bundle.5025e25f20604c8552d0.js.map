{"version":3,"sources":["webpack:///./connectedComponents/ViewerLocalFileData.js","webpack:///./lib/localFileLoaders/fileLoader.js","webpack:///./lib/localFileLoaders/pdfFileLoader.js","webpack:///./lib/localFileLoaders/dicomFileLoader.js","webpack:///./lib/localFileLoaders/fileLoaderService.js","webpack:///./lib/filesToStudies.js"],"names":["OHIFStudyMetadata","metadata","studyMetadataManager","utils","dropZoneLinkDialog","onDrop","i18n","dir","noDrag","getRootProps","getInputProps","className","webkitdirectory","mozdirectory","ViewerLocalFileData","studies","loading","error","purge","updatedStudies","map","study","studyMetadata","StudyInstanceUID","sopClassHandlerModules","extensionManager","modules","displaySets","createDisplaySets","setDisplaySets","forEachDisplaySet","displayset","localFile","add","setState","acceptedFiles","filesToStudies","updateStudies","this","state","JSON","stringify","noClick","style","width","height","studyInstanceUIDs","a","props","t","linksDialogMessage","Component","PropTypes","array","withTranslation","FileLoader","file","imageId","image","dataset","PDFFileLoader","getCornerstoneWADOImageLoader","cornerstoneWADOImageLoader","wadouri","loadFileRequest","getDefaultStudy","StudyDate","StudyTime","AccessionNumber","ReferringPhysicianName","PatientName","PatientID","PatientBirthdate","PatientSex","StudyId","StudyDescription","series","SeriesInstanceUID","SeriesDescription","SeriesNumber","instances","SOPInstanceUID","SOPClassUID","Rows","Columns","NumberOfFrames","InstanceNumber","getImageId","isLocalFile","metadataProvider","OHIF","cornerstone","DICOMFileLoader","dicomData","dcmjs","DicomMessage","readFile","DicomMetaDictionary","naturalizeDataset","dict","addInstance","_meta","namifyDataset","meta","e","console","getStudyFromDataset","PatientBirthDate","StudyID","instance","url","FileLoaderService","fileType","type","loader","getLoader","fileManager","loadFile","getDataset","getStudies","groupBy","list","groupByKey","listKey","nonKeyCounter","reduce","acc","obj","key","push","Object","values","studyGroup","seriesGrouped","processFile","fileLoaderService","addFile","log","name","message","files","processFilesPromises","Promise","all","groupSeries","flat"],"mappings":"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","file":"ViewerLocalFileData.bundle.5025e25f20604c8552d0.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { metadata, utils } from '@ohif/core';\r\n\r\nimport ConnectedViewer from './ConnectedViewer.js';\r\nimport PropTypes from 'prop-types';\r\nimport { extensionManager } from './../App.js';\r\nimport Dropzone from 'react-dropzone';\r\nimport filesToStudies from '../lib/filesToStudies';\r\nimport './ViewerLocalFileData.css';\r\nimport { withTranslation } from 'react-i18next';\r\n\r\nconst { OHIFStudyMetadata } = metadata;\r\nconst { studyMetadataManager } = utils;\r\n\r\nconst dropZoneLinkDialog = (onDrop, i18n, dir) => {\r\n  return (\r\n    <Dropzone onDrop={onDrop} noDrag>\r\n      {({ getRootProps, getInputProps }) => (\r\n        <span {...getRootProps()} className=\"link-dialog\">\r\n          {dir ? (\r\n            <span>\r\n              {i18n('Load folders')}\r\n              <input\r\n                {...getInputProps()}\r\n                webkitdirectory=\"true\"\r\n                mozdirectory=\"true\"\r\n              />\r\n            </span>\r\n          ) : (\r\n            <span>\r\n              {i18n('Load files')}\r\n              <input {...getInputProps()} />\r\n            </span>\r\n          )}\r\n        </span>\r\n      )}\r\n    </Dropzone>\r\n  );\r\n};\r\n\r\nconst linksDialogMessage = (onDrop, i18n) => {\r\n  return (\r\n    <>\r\n      {i18n('Or click to ')}\r\n      {dropZoneLinkDialog(onDrop, i18n)}\r\n      {i18n(' or ')}\r\n      {dropZoneLinkDialog(onDrop, i18n, true)}\r\n      {i18n(' from dialog')}\r\n    </>\r\n  );\r\n};\r\n\r\nclass ViewerLocalFileData extends Component {\r\n  static propTypes = {\r\n    studies: PropTypes.array,\r\n  };\r\n\r\n  state = {\r\n    studies: null,\r\n    loading: false,\r\n    error: null,\r\n  };\r\n\r\n  updateStudies = studies => {\r\n    // Render the viewer when the data is ready\r\n    studyMetadataManager.purge();\r\n\r\n    // Map studies to new format, update metadata manager?\r\n    const updatedStudies = studies.map(study => {\r\n      const studyMetadata = new OHIFStudyMetadata(\r\n        study,\r\n        study.StudyInstanceUID\r\n      );\r\n      const sopClassHandlerModules =\r\n        extensionManager.modules['sopClassHandlerModule'];\r\n\r\n      study.displaySets =\r\n        study.displaySets ||\r\n        studyMetadata.createDisplaySets(sopClassHandlerModules);\r\n      studyMetadata.setDisplaySets(study.displaySets);\r\n\r\n      studyMetadata.forEachDisplaySet(displayset => {\r\n        displayset.localFile = true;\r\n      });\r\n\r\n      studyMetadataManager.add(studyMetadata);\r\n\r\n      return study;\r\n    });\r\n\r\n    this.setState({\r\n      studies: updatedStudies,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const onDrop = async acceptedFiles => {\r\n      this.setState({ loading: true });\r\n\r\n      const studies = await filesToStudies(acceptedFiles);\r\n      const updatedStudies = this.updateStudies(studies);\r\n\r\n      if (!updatedStudies) {\r\n        return;\r\n      }\r\n\r\n      this.setState({ studies: updatedStudies, loading: false });\r\n    };\r\n\r\n    if (this.state.error) {\r\n      return <div>Error: {JSON.stringify(this.state.error)}</div>;\r\n    }\r\n\r\n    return (\r\n      <Dropzone onDrop={onDrop} noClick>\r\n        {({ getRootProps, getInputProps }) => (\r\n          <div {...getRootProps()} style={{ width: '100%', height: '100%' }}>\r\n            {this.state.studies ? (\r\n              <ConnectedViewer\r\n                studies={this.state.studies}\r\n                studyInstanceUIDs={\r\n                  this.state.studies &&\r\n                  this.state.studies.map(a => a.StudyInstanceUID)\r\n                }\r\n              />\r\n            ) : (\r\n              <div className={'drag-drop-instructions'}>\r\n                <div className={'drag-drop-contents'}>\r\n                  {this.state.loading ? (\r\n                    <h3>{this.props.t('Loading...')}</h3>\r\n                  ) : (\r\n                    <>\r\n                      <h3>\r\n                        {this.props.t(\r\n                          'Drag and Drop DICOM files here to load them in the Viewer'\r\n                        )}\r\n                      </h3>\r\n                      <h4>{linksDialogMessage(onDrop, this.props.t)}</h4>\r\n                    </>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n      </Dropzone>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withTranslation('Common')(ViewerLocalFileData);\r\n","export default class FileLoader {\r\n  fileType;\r\n  loadFile(file, imageId) { }\r\n  getDataset(image, imageId) { }\r\n  getStudies(dataset, imageId) { }\r\n}\r\n","import FileLoader from './fileLoader';\r\nimport { getCornerstoneWADOImageLoader } from '../../utils/cornerstoneWADOImageLoader';\r\n\r\nconst PDFFileLoader = new (class extends FileLoader {\r\n  fileType = 'application/pdf';\r\n  async loadFile(file, imageId) {\r\n    const cornerstoneWADOImageLoader = await getCornerstoneWADOImageLoader();\r\n    return cornerstoneWADOImageLoader.wadouri.loadFileRequest(imageId);\r\n  }\r\n\r\n  getDataset(image, imageId) {\r\n    const dataset = {};\r\n    dataset.imageId = image.imageId || imageId;\r\n    return dataset;\r\n  }\r\n\r\n  getStudies(dataset, imageId) {\r\n    return this.getDefaultStudy(imageId);\r\n  }\r\n\r\n  getDefaultStudy(imageId) {\r\n    const study = {\r\n      StudyInstanceUID: '',\r\n      StudyDate: '',\r\n      StudyTime: '',\r\n      AccessionNumber: '',\r\n      ReferringPhysicianName: '',\r\n      PatientName: '',\r\n      PatientID: '',\r\n      PatientBirthdate: '',\r\n      PatientSex: '',\r\n      StudyId: '',\r\n      StudyDescription: '',\r\n      series: [\r\n        {\r\n          SeriesInstanceUID: '',\r\n          SeriesDescription: '',\r\n          SeriesNumber: '',\r\n          instances: [\r\n            {\r\n              metadata: {\r\n                SOPInstanceUID: '',\r\n                SOPClassUID: '1.2.840.10008.5.1.4.1.1.104.1',\r\n                Rows: '',\r\n                Columns: '',\r\n                NumberOfFrames: 0,\r\n                InstanceNumber: 1,\r\n              },\r\n              getImageId: () => imageId,\r\n              isLocalFile: true,\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    };\r\n\r\n    return study;\r\n  }\r\n})();\r\n\r\nexport default PDFFileLoader;\r\n","import * as dcmjs from 'dcmjs';\r\nimport FileLoader from './fileLoader';\r\nimport OHIF from '@ohif/core';\r\nimport { getCornerstoneWADOImageLoader } from '../../utils/cornerstoneWADOImageLoader';\r\n\r\nconst metadataProvider = OHIF.cornerstone.metadataProvider;\r\n\r\nconst DICOMFileLoader = new (class extends FileLoader {\r\n  fileType = 'application/dicom';\r\n  async loadFile(file, imageId) {\r\n    const cornerstoneWADOImageLoader = await getCornerstoneWADOImageLoader();\r\n    return cornerstoneWADOImageLoader.wadouri.loadFileRequest(imageId);\r\n  }\r\n\r\n  getDataset(image, imageId) {\r\n    let dataset = {};\r\n    try {\r\n      const dicomData = dcmjs.data.DicomMessage.readFile(image);\r\n\r\n      dataset = dcmjs.data.DicomMetaDictionary.naturalizeDataset(\r\n        dicomData.dict\r\n      );\r\n\r\n      metadataProvider.addInstance(dataset);\r\n\r\n      dataset._meta = dcmjs.data.DicomMetaDictionary.namifyDataset(\r\n        dicomData.meta\r\n      );\r\n    } catch (e) {\r\n      console.error('Error reading dicom file', e);\r\n    }\r\n    // Set imageId on dataset to be consumed later on\r\n    dataset.imageId = imageId;\r\n\r\n    return dataset;\r\n  }\r\n\r\n  getStudies(dataset, imageId) {\r\n    return this.getStudyFromDataset(dataset);\r\n  }\r\n\r\n  getStudyFromDataset(dataset = {}) {\r\n    const {\r\n      StudyInstanceUID,\r\n      StudyDate,\r\n      StudyTime,\r\n      AccessionNumber,\r\n      ReferringPhysicianName,\r\n      PatientName,\r\n      PatientID,\r\n      PatientBirthDate,\r\n      PatientSex,\r\n      StudyID,\r\n      StudyDescription,\r\n      SeriesInstanceUID,\r\n      SeriesDescription,\r\n      SeriesNumber,\r\n      imageId,\r\n    } = dataset;\r\n\r\n    const instance = {\r\n      metadata: dataset,\r\n      url: imageId,\r\n    };\r\n\r\n    const series = {\r\n      SeriesInstanceUID: SeriesInstanceUID,\r\n      SeriesDescription: SeriesDescription,\r\n      SeriesNumber: SeriesNumber,\r\n      instances: [instance],\r\n    };\r\n\r\n    const study = {\r\n      StudyInstanceUID,\r\n      StudyDate,\r\n      StudyTime,\r\n      AccessionNumber,\r\n      ReferringPhysicianName,\r\n      PatientName,\r\n      PatientID,\r\n      PatientBirthDate,\r\n      PatientSex,\r\n      StudyID,\r\n      StudyDescription,\r\n      /*\r\n      TODO: in case necessary to uncomment this block, double check every property\r\n      numberOfStudyRelatedSeries: NumberOfStudyRelatedSeries || DICOMWeb.getString(dataset['00201206']),\r\n      numberOfStudyRelatedInstances: NumberOfStudyRelatedInstances || DICOMWeb.getString(dataset['00201208']),\r\n      Modality: Modality || DICOMWeb.getString(dataset['00080060']),\r\n      ModalitiesInStudy: ModalitiesInStudy || DICOMWeb.getString(dataset['00080061']),\r\n      modalities:\r\n      */\r\n      series: [series],\r\n    };\r\n\r\n    return study;\r\n  }\r\n})();\r\n\r\nexport default DICOMFileLoader;\r\n","import FileLoader from './fileLoader';\r\nimport PDFFileLoader from './pdfFileLoader';\r\nimport DICOMFileLoader from './dicomFileLoader';\r\nimport { getCornerstoneWADOImageLoader } from '../../utils/cornerstoneWADOImageLoader';\r\n\r\nclass FileLoaderService extends FileLoader {\r\n  fileType;\r\n  loader;\r\n  constructor(file) {\r\n    super();\r\n    const fileType = file && file.type;\r\n    this.loader = this.getLoader(fileType);\r\n    this.fileType = this.loader.fileType;\r\n  }\r\n\r\n  static groupSeries(studies) {\r\n    const groupBy = (list, groupByKey, listKey) => {\r\n      let nonKeyCounter = 1;\r\n\r\n      return list.reduce((acc, obj) => {\r\n        let key = obj[groupByKey];\r\n        const list = obj[listKey];\r\n\r\n        // in case key not found, group it using counter\r\n        key = !!key ? key : '' + nonKeyCounter++;\r\n\r\n        if (!acc[key]) {\r\n          acc[key] = { ...obj };\r\n          acc[key][listKey] = [];\r\n        }\r\n\r\n        acc[key][listKey].push(...list);\r\n\r\n        return acc;\r\n      }, {});\r\n    };\r\n\r\n    const studiesGrouped = Object.values(\r\n      groupBy(studies, 'StudyInstanceUID', 'series')\r\n    );\r\n\r\n    const result = studiesGrouped.map(studyGroup => {\r\n      const seriesGrouped = groupBy(\r\n        studyGroup.series,\r\n        'SeriesInstanceUID',\r\n        'instances'\r\n      );\r\n      studyGroup.series = Object.values(seriesGrouped);\r\n\r\n      return studyGroup;\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  async addFile(file) {\r\n    const cornerstoneWADOImageLoader = await getCornerstoneWADOImageLoader();\r\n    return cornerstoneWADOImageLoader.wadouri.fileManager.add(file);\r\n  }\r\n\r\n  loadFile(file, imageId) {\r\n    return this.loader.loadFile(file, imageId);\r\n  }\r\n\r\n  getDataset(image, imageId) {\r\n    return this.loader.getDataset(image, imageId);\r\n  }\r\n\r\n  getStudies(dataset, imageId) {\r\n    return this.loader.getStudies(dataset, imageId);\r\n  }\r\n\r\n  getLoader(fileType) {\r\n    if (fileType === 'application/pdf') {\r\n      return PDFFileLoader;\r\n    } else {\r\n      // Default to dicom loader\r\n      return DICOMFileLoader;\r\n    }\r\n  }\r\n}\r\n\r\nexport default FileLoaderService;\r\n","import FileLoaderService from './localFileLoaders/fileLoaderService';\r\n\r\nconst processFile = async file => {\r\n  try {\r\n    const fileLoaderService = new FileLoaderService(file);\r\n    const imageId = await fileLoaderService.addFile(file);\r\n    const image = await fileLoaderService.loadFile(file, imageId);\r\n    const dataset = await fileLoaderService.getDataset(image, imageId);\r\n    const studies = await fileLoaderService.getStudies(dataset, imageId);\r\n\r\n    return studies;\r\n  } catch (error) {\r\n    console.log(\r\n      error.name,\r\n      ':Error when trying to load and process local files:',\r\n      error.message\r\n    );\r\n  }\r\n};\r\n\r\nexport default async function filesToStudies(files) {\r\n  const processFilesPromises = files.map(processFile);\r\n  const studies = await Promise.all(processFilesPromises);\r\n\r\n  return FileLoaderService.groupSeries(studies.flat());\r\n}\r\n"],"sourceRoot":""}