{"version":3,"sources":["webpack:///./routes/ViewerRouting.js","webpack:///./customHooks/usePrevious.js","webpack:///./googleCloud/api/GoogleCloudApi.js","webpack:///C:/projects/Viewers/node_modules/lodash/_baseValues.js","webpack:///./connectedComponents/ViewerRetrieveStudyData.js","webpack:///./connectedComponents/ConnectedViewerRetrieveStudyData.js","webpack:///C:/projects/Viewers/node_modules/lodash/values.js","webpack:///./googleCloud/utils/getServers.js","webpack:///./customHooks/useServer.js"],"names":["UrlUtil","OHIF","utils","urlUtil","ViewerRouting","routeMatch","match","routeLocation","location","params","project","dataset","dicomStore","studyInstanceUIDs","seriesInstanceUIDs","server","useServer","studyUIDs","paramString","parseParam","seriesUIDs","queryFilters","queryString","getQueryFilters","querySeriesUIDs","_seriesInstanceUIDs","getSeriesInstanceUIDs","propTypes","PropTypes","shape","string","isRequired","usePrevious","value","ref","useRef","useEffect","current","GoogleCloudApi","accessToken","console","error","this","urlBase","urlStr","config","url","URL","data","search","URLSearchParams","fetch","fetchConfig","response","json","status","nextPageToken","pageToken","doRequest","key","subPage","hasOwnProperty","concat","isError","message","projectId","urlBaseProject","locationId","Error","method","headers","Authorization","healthcareApiEndpoint","arrayMap","module","exports","object","props","OHIFStudyMetadata","metadata","OHIFSeriesMetadata","retrieveStudiesMetadata","studies","deleteStudyMetadataPromise","studyMetadataManager","makeCancelable","_promoteStudyDisplaySet","study","studyMetadata","filters","promoted","Object","keys","length","seriesInstanceUID","promotedResponse","list","searchMethod","index","findIndex","bind","undefined","first","splice","_promoteToFront","getDisplaySets","valueToCompare","displaySet","SeriesInstanceUID","displaySets","_addSeriesToStudy","series","sopClassHandlerModules","extensionManager","modules","getData","seriesMetadata","addSeries","createAndAddDisplaySetsForSeries","_updateStudyMetadataManager","StudyInstanceUID","get","add","_sortStudyDisplaySet","sortDisplaySets","ViewerRetrieveStudyData","cancelableSeriesPromises","cancelableStudiesPromises","clearViewportSpecificData","useState","setError","setStudies","isStudyLoaded","setIsStudyLoaded","snackbarContext","useSnackbarContext","useContext","AppContext","appConfig","filterQueryParam","isFilterStrategy","studyDidLoad","_promoteList","queryParamApplied","dialog","show","showUserMessage","_showUserMessage","applied","firstSeries","_isQueryParamApplied","processStudies","studiesData","Array","isArray","map","createDisplaySets","setDisplaySets","_updateStudyDisplaySets","seriesLoader","Promise","resolve","promisesLoaders","hasNext","push","next","then","log","all","_loadRemainingSeries","result","isCanceled","catch","loadStudies","retrieveParams","purgeCancellablePromises","cancel","remove","prevStudyInstanceUIDs","every","e","includes","purge","JSON","stringify","ConnectedViewer","array","func","redux","actions","isActive","a","active","ConnectedViewerRetrieveStudyData","connect","state","ownProps","activeServer","servers","find","dispatch","baseValues","getServers","name","wadoUriRoot","qidoRoot","wadoRoot","imageRendering","thumbnailRendering","type","supportsFuzzyMatching","qidoSupportsIncludeField","isValidServer","isEqualServer","toCompare","serverLength","toCompareLength","getActiveServer","enableGoogleCloudAdapter","pathUrl","getUrlBaseDicomWeb","GoogleCloudUtilServers","setServers","useServerFromUrl","previousServers","urlBasedServers","serverHasChanged","newServer","exists","some","useSelector","useDispatch","shouldUpdateServer"],"mappings":"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","file":"ViewerRouting.bundle.25640ff13b13b057b520.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ConnectedViewerRetrieveStudyData from '../connectedComponents/ConnectedViewerRetrieveStudyData';\r\nimport useServer from '../customHooks/useServer';\r\nimport OHIF from '@ohif/core';\r\nconst { urlUtil: UrlUtil } = OHIF.utils;\r\n\r\n/**\r\n * Get array of seriesUIDs from param or from queryString\r\n * @param {*} seriesInstanceUIDs\r\n * @param {*} location\r\n */\r\nconst getSeriesInstanceUIDs = (seriesInstanceUIDs, routeLocation) => {\r\n  const queryFilters = UrlUtil.queryString.getQueryFilters(routeLocation);\r\n  const querySeriesUIDs = queryFilters && queryFilters['seriesInstanceUID'];\r\n  const _seriesInstanceUIDs = seriesInstanceUIDs || querySeriesUIDs;\r\n\r\n  return UrlUtil.paramString.parseParam(_seriesInstanceUIDs);\r\n};\r\n\r\nfunction ViewerRouting({ match: routeMatch, location: routeLocation }) {\r\n  const {\r\n    project,\r\n    location,\r\n    dataset,\r\n    dicomStore,\r\n    studyInstanceUIDs,\r\n    seriesInstanceUIDs,\r\n  } = routeMatch.params;\r\n  const server = useServer({ project, location, dataset, dicomStore });\r\n\r\n  const studyUIDs = UrlUtil.paramString.parseParam(studyInstanceUIDs);\r\n  const seriesUIDs = getSeriesInstanceUIDs(seriesInstanceUIDs, routeLocation);\r\n\r\n  if (server && studyUIDs) {\r\n    return (\r\n      <ConnectedViewerRetrieveStudyData\r\n        studyInstanceUIDs={studyUIDs}\r\n        seriesInstanceUIDs={seriesUIDs}\r\n      />\r\n    );\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nViewerRouting.propTypes = {\r\n  match: PropTypes.shape({\r\n    params: PropTypes.shape({\r\n      studyInstanceUIDs: PropTypes.string.isRequired,\r\n      seriesInstanceUIDs: PropTypes.string,\r\n      dataset: PropTypes.string,\r\n      dicomStore: PropTypes.string,\r\n      location: PropTypes.string,\r\n      project: PropTypes.string,\r\n    }),\r\n  }),\r\n};\r\n\r\nexport default ViewerRouting;\r\n","import React, { useEffect, useRef } from 'react';\r\nexport default function usePrevious(value) {\r\n  const ref = useRef();\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  }, [value]);\r\n\r\n  return ref.current;\r\n}\r\n","class GoogleCloudApi {\r\n  setAccessToken(accessToken) {\r\n    if (!accessToken) console.error('Access token is empty');\r\n    this.accessToken = accessToken;\r\n  }\r\n\r\n  get fetchConfig() {\r\n    if (!this.accessToken) throw new Error('OIDC access_token is not set');\r\n    return {\r\n      method: 'GET',\r\n      headers: {\r\n        Authorization: 'Bearer ' + this.accessToken,\r\n      },\r\n    };\r\n  }\r\n\r\n  get urlBase() {\r\n    return this.healthcareApiEndpoint || 'https://healthcare.googleapis.com/v1beta1';\r\n  }\r\n\r\n  set urlBase(url) {\r\n    this.healthcareApiEndpoint = url;\r\n  }\r\n\r\n  get urlBaseProject() {\r\n    return this.urlBase + `/projects`;\r\n  }\r\n\r\n  getUrlBaseDicomWeb(project, location, dataset, dicomStore) {\r\n    return (\r\n      this.urlBase +\r\n      `/projects/${project}/locations/${location}/datasets/${dataset}/dicomStores/${dicomStore}/dicomWeb`\r\n    );\r\n  }\r\n\r\n  getUrlPath(project, location, dataset, dicomStore) {\r\n    `/projects/${project}/locations/${location}/datasets/${dataset}/dicomStores/${dicomStore}`;\r\n  }\r\n\r\n  async doRequest(urlStr, config = {}, params = {}) {\r\n    const url = new URL(urlStr);\r\n    let data = null;\r\n    url.search = new URLSearchParams(params);\r\n\r\n    try {\r\n      const response = await fetch(url, { ...this.fetchConfig, config });\r\n      try {\r\n        data = await response.json();\r\n      } catch (err) {}\r\n      if (response.status >= 200 && response.status < 300 && data != null) {\r\n        if (data.nextPageToken != null) {\r\n          params.pageToken = data.nextPageToken;\r\n          let subPage = await this.doRequest(urlStr, config, params);\r\n          for (let key in data) {\r\n            if (data.hasOwnProperty(key)) {\r\n              data[key] = data[key].concat(subPage.data[key]);\r\n            }\r\n          }\r\n        }\r\n        return {\r\n          isError: false,\r\n          status: response.status,\r\n          data,\r\n        };\r\n      } else {\r\n        return {\r\n          isError: true,\r\n          status: response.status,\r\n          message:\r\n            (data && data.error && data.error.message) || 'Unknown error',\r\n        };\r\n      }\r\n    } catch (err) {\r\n      if (data && data.error) {\r\n        return {\r\n          isError: true,\r\n          status: err.status,\r\n          message: err.response.data.error.message || 'Unspecified error',\r\n        };\r\n      }\r\n      return {\r\n        isError: true,\r\n        message: (err && err.message) || 'Oops! Something went wrong',\r\n      };\r\n    }\r\n  }\r\n\r\n  async loadProjects() {\r\n    return this.doRequest(\r\n      'https://cloudresourcemanager.googleapis.com/v1/projects'\r\n    );\r\n  }\r\n\r\n  async loadLocations(projectId) {\r\n    return this.doRequest(`${this.urlBaseProject}/${projectId}/locations`);\r\n  }\r\n\r\n  async loadDatasets(projectId, locationId) {\r\n    return this.doRequest(\r\n      `${this.urlBaseProject}/${projectId}/locations/${locationId}/datasets`\r\n    );\r\n  }\r\n\r\n  async loadDicomStores(dataset) {\r\n    return this.doRequest(`${this.urlBase}/${dataset}/dicomStores`);\r\n  }\r\n}\r\n\r\nexport default new GoogleCloudApi();\r\n","var arrayMap = require('./_arrayMap');\n\n/**\n * The base implementation of `_.values` and `_.valuesIn` which creates an\n * array of `object` property values corresponding to the property names\n * of `props`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array} props The property names to get values for.\n * @returns {Object} Returns the array of property values.\n */\nfunction baseValues(object, props) {\n  return arrayMap(props, function(key) {\n    return object[key];\n  });\n}\n\nmodule.exports = baseValues;\n","import React, { useState, useEffect, useContext } from 'react';\r\nimport { metadata, studies, utils, log } from '@ohif/core';\r\nimport usePrevious from '../customHooks/usePrevious';\r\n\r\nimport ConnectedViewer from './ConnectedViewer.js';\r\nimport PropTypes from 'prop-types';\r\nimport { extensionManager } from './../App.js';\r\nimport { useSnackbarContext } from '@ohif/ui';\r\n\r\nconst { OHIFStudyMetadata, OHIFSeriesMetadata } = metadata;\r\nconst { retrieveStudiesMetadata, deleteStudyMetadataPromise } = studies;\r\nconst { studyMetadataManager, makeCancelable } = utils;\r\n\r\n// Contexts\r\nimport AppContext from '../context/AppContext';\r\n\r\nconst _promoteToFront = (list, value, searchMethod) => {\r\n  let response = [...list];\r\n  let promoted = false;\r\n  const index = response.findIndex(searchMethod.bind(undefined, value));\r\n\r\n  if (index > 0) {\r\n    const first = response.splice(index, 1);\r\n    response = [...first, ...response];\r\n  }\r\n\r\n  if (index >= 0) {\r\n    promoted = true;\r\n  }\r\n\r\n  return {\r\n    promoted,\r\n    data: response,\r\n  };\r\n};\r\n\r\n/**\r\n * Promote series to front if find found equivalent on filters object\r\n * @param {Object} study - study reference to promote series against\r\n * @param {Object} [filters] - Object containing filters to be applied\r\n * @param {string} [filter.seriesInstanceUID] - series instance uid to filter results against\r\n * @param {boolean} isFilterStrategy - if filtering by query param strategy ON\r\n */\r\nconst _promoteList = (study, studyMetadata, filters, isFilterStrategy) => {\r\n  let promoted = false;\r\n  // Promote only if no filter should be applied\r\n  if (!isFilterStrategy) {\r\n    _sortStudyDisplaySet(study, studyMetadata);\r\n    promoted = _promoteStudyDisplaySet(study, studyMetadata, filters);\r\n  }\r\n\r\n  return promoted;\r\n};\r\n\r\nconst _promoteStudyDisplaySet = (study, studyMetadata, filters) => {\r\n  let promoted = false;\r\n  const queryParamsLength = Object.keys(filters).length;\r\n  const shouldPromoteToFront = queryParamsLength > 0;\r\n\r\n  if (shouldPromoteToFront) {\r\n    const { seriesInstanceUID } = filters;\r\n\r\n    const _seriesLookup = (valueToCompare, displaySet) => {\r\n      return displaySet.SeriesInstanceUID === valueToCompare;\r\n    };\r\n    const promotedResponse = _promoteToFront(\r\n      studyMetadata.getDisplaySets(),\r\n      seriesInstanceUID,\r\n      _seriesLookup\r\n    );\r\n\r\n    study.displaySets = promotedResponse.data;\r\n    promoted = promotedResponse.promoted;\r\n  }\r\n\r\n  return promoted;\r\n};\r\n\r\n/**\r\n * Method to identify if query param (from url) was applied to given list\r\n * @param {Object} study - study reference to promote series against\r\n * @param {Object} [filters] - Object containing filters to be applied\r\n * @param {string} [filter.seriesInstanceUID] - series instance uid to filter results against\r\n * @param {boolean} isFilterStrategy - if filtering by query param strategy ON\r\n */\r\nconst _isQueryParamApplied = (study, filters = {}, isFilterStrategy) => {\r\n  const { seriesInstanceUID } = filters;\r\n  let applied = true;\r\n  // skip in case no filter or no toast manager\r\n  if (!seriesInstanceUID) {\r\n    return applied;\r\n  }\r\n\r\n  const { series = [], displaySets = [] } = study;\r\n  const firstSeries = isFilterStrategy ? series[0] : displaySets[0];\r\n\r\n  if (!firstSeries || firstSeries.SeriesInstanceUID !== seriesInstanceUID) {\r\n    applied = false;\r\n  }\r\n\r\n  return applied;\r\n};\r\nconst _showUserMessage = (queryParamApplied, message, dialog = {}) => {\r\n  if (queryParamApplied) {\r\n    return;\r\n  }\r\n\r\n  const { show: showUserMessage = () => {} } = dialog;\r\n  showUserMessage({\r\n    message,\r\n  });\r\n};\r\n\r\nconst _addSeriesToStudy = (studyMetadata, series) => {\r\n  const sopClassHandlerModules =\r\n    extensionManager.modules['sopClassHandlerModule'];\r\n  const study = studyMetadata.getData();\r\n  const seriesMetadata = new OHIFSeriesMetadata(series, study);\r\n  studyMetadata.addSeries(seriesMetadata);\r\n  studyMetadata.createAndAddDisplaySetsForSeries(\r\n    sopClassHandlerModules,\r\n    seriesMetadata,\r\n    false\r\n  );\r\n  study.displaySets = studyMetadata.getDisplaySets();\r\n  _updateStudyMetadataManager(study, studyMetadata);\r\n};\r\n\r\nconst _updateStudyMetadataManager = (study, studyMetadata) => {\r\n  const { StudyInstanceUID } = study;\r\n\r\n  if (!studyMetadataManager.get(StudyInstanceUID)) {\r\n    studyMetadataManager.add(studyMetadata);\r\n  }\r\n};\r\n\r\nconst _updateStudyDisplaySets = (study, studyMetadata) => {\r\n  const sopClassHandlerModules =\r\n    extensionManager.modules['sopClassHandlerModule'];\r\n\r\n  if (!study.displaySets) {\r\n    study.displaySets = studyMetadata.createDisplaySets(sopClassHandlerModules);\r\n  }\r\n\r\n  studyMetadata.setDisplaySets(study.displaySets);\r\n};\r\n\r\nconst _sortStudyDisplaySet = (study, studyMetadata) => {\r\n  studyMetadata.sortDisplaySets(study.displaySets);\r\n};\r\nconst _loadRemainingSeries = studyMetadata => {\r\n  const { seriesLoader } = studyMetadata.getData();\r\n  if (!seriesLoader) {\r\n    return Promise.resolve();\r\n  }\r\n  const promisesLoaders = [];\r\n  while (seriesLoader.hasNext()) {\r\n    promisesLoaders.push(\r\n      seriesLoader\r\n        .next()\r\n        .then(\r\n          series => void _addSeriesToStudy(studyMetadata, series),\r\n          error => void log.error(error)\r\n        )\r\n    );\r\n  }\r\n\r\n  return Promise.all(promisesLoaders);\r\n};\r\n\r\nfunction ViewerRetrieveStudyData({\r\n  server,\r\n  studyInstanceUIDs,\r\n  seriesInstanceUIDs,\r\n  clearViewportSpecificData,\r\n}) {\r\n  // hooks\r\n  const [error, setError] = useState(false);\r\n  const [studies, setStudies] = useState([]);\r\n  const [isStudyLoaded, setIsStudyLoaded] = useState(false);\r\n  const snackbarContext = useSnackbarContext();\r\n  const { appConfig = {} } = useContext(AppContext);\r\n  const { filterQueryParam: isFilterStrategy = false } = appConfig;\r\n\r\n  let cancelableSeriesPromises;\r\n  let cancelableStudiesPromises;\r\n  /**\r\n   * Callback method when study is totally loaded\r\n   * @param {object} study study loaded\r\n   * @param {object} studyMetadata studyMetadata for given study\r\n   * @param {Object} [filters] - Object containing filters to be applied\r\n   * @param {string} [filter.seriesInstanceUID] - series instance uid to filter results against\r\n   */\r\n  const studyDidLoad = (study, studyMetadata, filters) => {\r\n    // User message\r\n    const promoted = _promoteList(\r\n      study,\r\n      studyMetadata,\r\n      filters,\r\n      isFilterStrategy\r\n    );\r\n\r\n    // Clear viewport to allow new promoted one to be displayed\r\n    if (promoted) {\r\n      clearViewportSpecificData(0);\r\n    }\r\n\r\n    const isQueryParamApplied = _isQueryParamApplied(\r\n      study,\r\n      filters,\r\n      isFilterStrategy\r\n    );\r\n    // Show message in case not promoted neither filtered but should to\r\n    _showUserMessage(\r\n      isQueryParamApplied,\r\n      'Query parameters were not applied. Using original series list for given study.',\r\n      snackbarContext\r\n    );\r\n\r\n    setStudies([...studies, study]);\r\n    setIsStudyLoaded(true);\r\n  };\r\n\r\n  /**\r\n   * Method to process studies. It will update displaySet, studyMetadata, load remaining series, ...\r\n   * @param {Array} studiesData Array of studies retrieved from server\r\n   * @param {Object} [filters] - Object containing filters to be applied\r\n   * @param {string} [filter.seriesInstanceUID] - series instance uid to filter results against\r\n   */\r\n  const processStudies = (studiesData, filters) => {\r\n    if (Array.isArray(studiesData) && studiesData.length > 0) {\r\n      // Map studies to new format, update metadata manager?\r\n      const studies = studiesData.map(study => {\r\n        const studyMetadata = new OHIFStudyMetadata(\r\n          study,\r\n          study.StudyInstanceUID\r\n        );\r\n\r\n        _updateStudyDisplaySets(study, studyMetadata);\r\n        _updateStudyMetadataManager(study, studyMetadata);\r\n\r\n        // Attempt to load remaning series if any\r\n        cancelableSeriesPromises[study.StudyInstanceUID] = makeCancelable(\r\n          _loadRemainingSeries(studyMetadata)\r\n        )\r\n          .then(result => {\r\n            if (result && !result.isCanceled) {\r\n              studyDidLoad(study, studyMetadata, filters);\r\n            }\r\n          })\r\n          .catch(error => {\r\n            if (error && !error.isCanceled) {\r\n              setError(true);\r\n              log.error(error);\r\n            }\r\n          });\r\n\r\n        return study;\r\n      });\r\n\r\n      setStudies(studies);\r\n    }\r\n  };\r\n\r\n  const loadStudies = async () => {\r\n    try {\r\n      const filters = {};\r\n      // Use the first, discard others\r\n      const seriesInstanceUID = seriesInstanceUIDs && seriesInstanceUIDs[0];\r\n\r\n      const retrieveParams = [server, studyInstanceUIDs];\r\n\r\n      if (seriesInstanceUID) {\r\n        filters.seriesInstanceUID = seriesInstanceUID;\r\n        // Query param filtering controlled by appConfig property\r\n        if (isFilterStrategy) {\r\n          retrieveParams.push(filters);\r\n        }\r\n      }\r\n\r\n      cancelableStudiesPromises[studyInstanceUIDs] = makeCancelable(\r\n        retrieveStudiesMetadata(...retrieveParams)\r\n      )\r\n        .then(result => {\r\n          if (result && !result.isCanceled) {\r\n            processStudies(result, filters);\r\n          }\r\n        })\r\n        .catch(error => {\r\n          if (error && !error.isCanceled) {\r\n            setError(true);\r\n            log.error(error);\r\n          }\r\n        });\r\n    } catch (error) {\r\n      if (error) {\r\n        setError(true);\r\n        log.error(error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const purgeCancellablePromises = () => {\r\n    for (let studyInstanceUIDs in cancelableStudiesPromises) {\r\n      if ('cancel' in cancelableStudiesPromises[studyInstanceUIDs]) {\r\n        cancelableStudiesPromises[studyInstanceUIDs].cancel();\r\n      }\r\n    }\r\n\r\n    for (let studyInstanceUIDs in cancelableSeriesPromises) {\r\n      if ('cancel' in cancelableSeriesPromises[studyInstanceUIDs]) {\r\n        cancelableSeriesPromises[studyInstanceUIDs].cancel();\r\n        deleteStudyMetadataPromise(studyInstanceUIDs);\r\n        studyMetadataManager.remove(studyInstanceUIDs);\r\n      }\r\n    }\r\n  };\r\n\r\n  const prevStudyInstanceUIDs = usePrevious(studyInstanceUIDs);\r\n\r\n  useEffect(() => {\r\n    const hasStudyInstanceUIDsChanged = !(\r\n      prevStudyInstanceUIDs &&\r\n      prevStudyInstanceUIDs.every(e => studyInstanceUIDs.includes(e))\r\n    );\r\n\r\n    if (hasStudyInstanceUIDsChanged) {\r\n      studyMetadataManager.purge();\r\n      purgeCancellablePromises();\r\n    }\r\n  }, [studyInstanceUIDs]);\r\n\r\n  useEffect(() => {\r\n    cancelableSeriesPromises = {};\r\n    cancelableStudiesPromises = {};\r\n    loadStudies();\r\n\r\n    return () => {\r\n      purgeCancellablePromises();\r\n    };\r\n  }, []);\r\n\r\n  if (error) {\r\n    return <div>Error: {JSON.stringify(error)}</div>;\r\n  }\r\n\r\n  return (\r\n    <ConnectedViewer\r\n      studies={studies}\r\n      isStudyLoaded={isStudyLoaded}\r\n      studyInstanceUIDs={studyInstanceUIDs}\r\n    />\r\n  );\r\n}\r\n\r\nViewerRetrieveStudyData.propTypes = {\r\n  studyInstanceUIDs: PropTypes.array.isRequired,\r\n  seriesInstanceUIDs: PropTypes.array,\r\n  server: PropTypes.object,\r\n  clearViewportSpecificData: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ViewerRetrieveStudyData;\r\n","import { connect } from 'react-redux';\r\nimport ViewerRetrieveStudyData from './ViewerRetrieveStudyData.js';\r\nimport OHIF from '@ohif/core';\r\n\r\nconst { clearViewportSpecificData } = OHIF.redux.actions;\r\nconst isActive = a => a.active === true;\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  const activeServer = state.servers.servers.find(isActive);\r\n\r\n  return {\r\n    server: ownProps.server || activeServer,\r\n  };\r\n};\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    clearViewportSpecificData: () => {\r\n      dispatch(clearViewportSpecificData());\r\n    },\r\n  };\r\n};\r\n\r\nconst ConnectedViewerRetrieveStudyData = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ViewerRetrieveStudyData);\r\n\r\nexport default ConnectedViewerRetrieveStudyData;\r\n","var baseValues = require('./_baseValues'),\n    keys = require('./keys');\n\n/**\n * Creates an array of the own enumerable string keyed property values of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property values.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.values(new Foo);\n * // => [1, 2] (iteration order is not guaranteed)\n *\n * _.values('hi');\n * // => ['h', 'i']\n */\nfunction values(object) {\n  return object == null ? [] : baseValues(object, keys(object));\n}\n\nmodule.exports = values;\n","const getServers = (data, name) => {\r\n  const {\r\n    wadoUriRoot,\r\n    qidoRoot,\r\n    wadoRoot,\r\n    dataset = '',\r\n    dicomStore = '',\r\n    location = '',\r\n    project = '',\r\n  } = data;\r\n\r\n  return [\r\n    {\r\n      name: name,\r\n      dataset,\r\n      dicomStore,\r\n      location,\r\n      project,\r\n      imageRendering: 'wadors',\r\n      thumbnailRendering: 'wadors',\r\n      type: 'dicomWeb',\r\n      active: true,\r\n      wadoUriRoot,\r\n      qidoRoot,\r\n      wadoRoot,\r\n      supportsFuzzyMatching: false,\r\n      qidoSupportsIncludeField: false,\r\n    },\r\n  ];\r\n};\r\n\r\nconst isValidServer = server => {\r\n  return (\r\n    server &&\r\n    !!server.dataset &&\r\n    !!server.dicomStore &&\r\n    !!server.location &&\r\n    !!server.project\r\n  );\r\n};\r\n\r\nconst isEqualServer = (server = {}, toCompare = {}) => {\r\n  const serverLength = Object.keys(server).length;\r\n  const toCompareLength = Object.keys(toCompare).length;\r\n\r\n  if (!serverLength || !toCompareLength) {\r\n    return false;\r\n  }\r\n\r\n  return (\r\n    server.dataset === toCompare.dataset &&\r\n    server.dataset === toCompare.dataset &&\r\n    server.dicomStore === toCompare.dicomStore &&\r\n    server.location === toCompare.location &&\r\n    server.project === toCompare.project\r\n  );\r\n};\r\n\r\nexport { getServers, isValidServer, isEqualServer };\r\n","import React, { useContext } from 'react';\r\nimport GoogleCloudApi from '../googleCloud/api/GoogleCloudApi';\r\nimport usePrevious from './usePrevious';\r\n\r\nimport * as GoogleCloudUtilServers from '../googleCloud/utils/getServers';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport isEqual from 'lodash.isequal';\r\n\r\n// Contexts\r\nimport AppContext from '../context/AppContext';\r\n\r\nconst getActiveServer = servers => {\r\n  const isActive = a => a.active === true;\r\n\r\n  return servers && servers.servers && servers.servers.find(isActive);\r\n};\r\n\r\nconst getServers = (appConfig, project, location, dataset, dicomStore) => {\r\n  let servers = [];\r\n  if (appConfig.enableGoogleCloudAdapter) {\r\n    GoogleCloudApi.urlBase = appConfig.healthcareApiEndpoint;\r\n    const pathUrl = GoogleCloudApi.getUrlBaseDicomWeb(\r\n      project,\r\n      location,\r\n      dataset,\r\n      dicomStore\r\n    );\r\n    const data = {\r\n      project,\r\n      location,\r\n      dataset,\r\n      dicomStore,\r\n      wadoUriRoot: pathUrl,\r\n      qidoRoot: pathUrl,\r\n      wadoRoot: pathUrl,\r\n    };\r\n    servers = GoogleCloudUtilServers.getServers(data, dicomStore);\r\n    if (!isValidServer(servers[0], appConfig)) {\r\n      return;\r\n    }\r\n  }\r\n\r\n  return servers;\r\n};\r\n\r\nconst isValidServer = (server, appConfig) => {\r\n  if (appConfig.enableGoogleCloudAdapter) {\r\n    return GoogleCloudUtilServers.isValidServer(server);\r\n  }\r\n\r\n  return !!server;\r\n};\r\n\r\nconst setServers = (dispatch, servers) => {\r\n  const action = {\r\n    type: 'SET_SERVERS',\r\n    servers,\r\n  };\r\n  dispatch(action);\r\n};\r\n\r\nconst useServerFromUrl = (\r\n  servers = [],\r\n  previousServers,\r\n  activeServer,\r\n  urlBasedServers,\r\n  appConfig,\r\n  project,\r\n  location,\r\n  dataset,\r\n  dicomStore\r\n) => {\r\n  // update state from url available only when gcloud on\r\n  if (!appConfig.enableGoogleCloudAdapter) {\r\n    return false;\r\n  }\r\n\r\n  const serverHasChanged = previousServers !== servers && previousServers;\r\n\r\n  // do not update from url. use state instead.\r\n  if (serverHasChanged) {\r\n    return false;\r\n  }\r\n\r\n  // if no valid urlbased servers\r\n  if (!urlBasedServers || !urlBasedServers.length) {\r\n    return false;\r\n  } else if (!servers.length || !activeServer) {\r\n    // no current valid server\r\n    return true;\r\n  }\r\n\r\n  const newServer = urlBasedServers[0];\r\n\r\n  let exists = servers.some(\r\n    GoogleCloudUtilServers.isEqualServer.bind(undefined, newServer)\r\n  );\r\n\r\n  return !exists;\r\n};\r\n\r\nexport default function useServer({\r\n  project,\r\n  location,\r\n  dataset,\r\n  dicomStore,\r\n} = {}) {\r\n  // Hooks\r\n  const servers = useSelector(state => state && state.servers);\r\n  const previousServers = usePrevious(servers);\r\n  const dispatch = useDispatch();\r\n\r\n  const { appConfig = {} } = useContext(AppContext);\r\n\r\n  const activeServer = getActiveServer(servers);\r\n  const urlBasedServers =\r\n    getServers(appConfig, project, location, dataset, dicomStore) || [];\r\n  const shouldUpdateServer = useServerFromUrl(\r\n    servers.servers,\r\n    previousServers,\r\n    activeServer,\r\n    urlBasedServers,\r\n    appConfig,\r\n    project,\r\n    location,\r\n    dataset,\r\n    dicomStore\r\n  );\r\n\r\n  if (shouldUpdateServer) {\r\n    setServers(dispatch, urlBasedServers);\r\n  } else if (isValidServer(activeServer, appConfig)) {\r\n    return activeServer;\r\n  }\r\n}\r\n"],"sourceRoot":""}